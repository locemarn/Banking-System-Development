name: Banking System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  # Non-sensitive test database configuration
  DB_TEST_HOST: localhost
  DB_TEST_PORT: 5432
  DB_TEST_NAME: banking_test
  DB_TEST_USER: banking_test_user
  
jobs:
  test:
    name: Tests and Quality Checks
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      actions: read
      security-events: write
      checks: write
    
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_DB: ${{ secrets.DB_TEST_NAME }}
          POSTGRES_USER: ${{ secrets.DB_TEST_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
        ports:
          - ${{ secrets.DB_TEST_PORT }}:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ secrets.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ secrets.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Biome checks
        run: pnpm run check

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: test
          DB_HOST: ${{ secrets.DB_TEST_HOST }}
          DB_PORT: ${{ secrets.DB_TEST_PORT }}
          DB_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_USER: ${{ secrets.DB_TEST_USER }}
          DB_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Run unit tests
        run: pnpm run test
        env:
          NODE_ENV: test
          DB_HOST: ${{ secrets.DB_TEST_HOST }}
          DB_PORT: ${{ secrets.DB_TEST_PORT }}
          DB_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_USER: ${{ secrets.DB_TEST_USER }}
          DB_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Run integration tests
        run: pnpm run test:e2e
        env:
          NODE_ENV: test
          DB_HOST: ${{ secrets.DB_TEST_HOST }}
          DB_PORT: ${{ secrets.DB_TEST_PORT }}
          DB_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_USER: ${{ secrets.DB_TEST_USER }}
          DB_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Generate test coverage
        run: pnpm run test:cov
        env:
          NODE_ENV: test
          DB_HOST: ${{ secrets.DB_TEST_HOST }}
          DB_PORT: ${{ secrets.DB_TEST_PORT }}
          DB_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_USER: ${{ secrets.DB_TEST_USER }}
          DB_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false
